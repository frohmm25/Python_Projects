# Problem Set 2, hangman.py
# Name: Michael Frohmader
# Collaborators:
# Time spent:

# Hangman Game
# -----------------------------------


import random
import string

WORDLIST_FILENAME = "words.txt"




def load_words():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist



def choose_word(wordlist):
    """
    wordlist (list): list of words (strings)
    
    Returns a word from wordlist at random
    """
    return random.choice(wordlist)



# -----------------------------------


# Load the list of words into the variable wordlist
# so that it can be accessed from anywhere in the program
wordlist = load_words()

HintList = []
warnings = 4
secret_word = choose_word(wordlist)
letters_guessed = []
guesscounter = 0
x = ''
num_guesses = len(secret_word)+3

numbers = ['1','2','3','4','5','6','7','8','9', ' ']


def is_word_guessed(secret_word,letters_guessed):
    '''
    secret_word: string, the word the user is guessing; assumes all letters are
      lowercase
    letters_guessed: list (of letters), which letters have been guessed so far;
      assumes that all letters are lowercase
    returns: boolean, True if all the letters of secret_word are in letters_guessed;
      False otherwise
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    x=''
    for char1 in secret_word:
        for char2 in letters_guessed:
            if char1 == char2:
                x += char1
    if x == secret_word:
        return True
    else:
        return False



def get_guessed_word(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string, comprised of letters, underscores (_), and spaces that represents
      which letters in secret_word have been guessed so far.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    my_word = ''
    for char1 in secret_word:
        charcounter = 0
        for char3 in letters_guessed:
            if char1 == char3:
                my_word += char1
                break
            else:
                charcounter += 1
                if charcounter == len(letters_guessed):
                    my_word += ' _ '
    return (my_word)
    

def is_letter_guessed(secret_word, x):
    '''
    Another add on helper function specifically to test if 
    a letter was guessed to give a guess back
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    
    for char1 in x:
        for char2 in secret_word:
            if char1 == char2:
                return True

def get_available_letters(letters_guessed):
    '''
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string (of letters), comprised of letters that represents which letters have not
      yet been guessed.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    charcounter2 = 0
    letters_left = string.ascii_lowercase
    for char1 in letters_guessed:
        for char3 in letters_left:
            if char1 == char3:
                letters_left = (letters_left[0:(charcounter2)] + letters_left[(charcounter2+1):26])
                charcounter2 = 0
                break
                
            else:
                charcounter2 += 1
    return(letters_left)

def get_letters_guessed():
    '''my helper function to combine input of letters guessed into a list'''
    global num_guesses
    global warnings
    if is_word_guessed(secret_word,letters_guessed)==False:
        x = input(str('Guess a letter: '))
        if x in numbers:
            print('Letters Only!')
            num_guesses += 1
            warnings -= 1
            print(warnings, ' Warnings LEFT')
            if 1 > warnings:
                 return hangman(secret_word)
            get_letters_guessed()
        if x in letters_guessed:
            print('You already guessed that letter!')
            num_guesses += 1
            warnings -= 1
            print(warnings, ' Warnings LEFT')
            if 1 > warnings:
                return hangman(secret_word)
            get_letters_guessed()
        if len(x) > 1:
            print('Guess One Letter at a time')
            num_guesses += 1
            warnings -= 1
            print(warnings, ' Warnings LEFT')
            if 1 > warnings:
                return hangman(secret_word)
            get_letters_guessed()
        x = x.lower()
        if is_letter_guessed(secret_word, x) == True:
            num_guesses += 1
            print(""\
                  "")
            print("")
            print(""\
                  "")
            
            print("GREAT GUESS")
            print("You get a free round")
        letters_guessed.extend(x)
        print('')
    # print('Letters guessed:')
    # print(letters_guessed)
    

def hangman(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses

    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Remember to make
      sure that the user puts in a letter!
    
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
    
    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    global warnings
    if warnings > 1:  
        guesscounter = len(letters_guessed)
        '''game prompt with loop that ends when guesses reached, function looks duplicated
            but that's just to denote that one guess is left'''
        print('You have', (num_guesses - guesscounter), 'guesses left.')
        print('Available letters: ', get_available_letters(letters_guessed))
        score = (len(secret_word)) * (num_guesses-guesscounter)
        print('Points = ', score)
        
        x = get_letters_guessed()
        print(get_guessed_word(secret_word, letters_guessed))
        print('Hints: ', show_possible_matches(get_guessed_word(secret_word, letters_guessed))) 
        print('------------------')
        if is_word_guessed(secret_word,letters_guessed)==True:
            print(10*'YOU WIN ')
            print((score), 'POINTS')
    
        if ((num_guesses)-guesscounter > 1 and is_word_guessed(secret_word,letters_guessed)==False):
            return(hangman(secret_word))
            return(guesscounter) 
        else:
            print('GAME OVER')
            print('GAME OVER')
            print('The word was', secret_word)
 
    else:
        print('GAME OVER')
        print('GAME OVER')
        print('The word was', secret_word)
        


# When you've completed your hangman function, scroll down to the bottom
# of the file and uncomment the first two lines to test
#(hint: you might want to pick your own
# secret_word while you're doing your own testing)


# -----------------------------------



def match_with_gaps(my_word, other_word):
    my_word = "".join(my_word.split())
    '''
    my_word: string with _ characters, current guess of secret word
    other_word: string, regular English word
    returns: boolean, True if all the actual letters of my_word match the 
        corresponding letters of other_word, or the letter is the special symbol
        _ , and my_word and other_word are of the same length;
        False otherwise: 
    '''
    if len(my_word) <= 0:
        return True

    if (my_word[0]=='_' or (my_word[0] == other_word[0])) and ((my_word[-1] == other_word[-1]) or (my_word[-1]=='_')):
        return match_with_gaps(my_word[1:-1], other_word[1:-1])

    else:
        return False



def show_possible_matches(my_word):
    myword = "".join(my_word.split())
    HintList = []
    '''
    my_word: string with _ characters, current guess of secret word
    returns: nothing, but should print out every word in wordlist that matches my_word
              Keep in mind that in hangman when a letter is guessed, all the positions
              at which that letter occurs in the secret word are revealed.
              Therefore, the hidden letter(_ ) cannot be one of the letters in the word
              that has already been revealed.

    '''
    for other_word in wordlist:
        if len(myword) == len(other_word):
            if match_with_gaps(my_word, other_word) == True:
                HintList.append(other_word)
    if len(HintList) == 0:
        return ('No Matches Found')
    return random.choice(HintList), random.choice(HintList), random.choice(HintList), random.choice(HintList), random.choice(HintList), random.choice(HintList), random.choice(HintList), random.choice(HintList)
    
    




print('')
print('Welcome to the game Hangman!')
print('')
print('I am thinking of a word that is',len(secret_word),'letters long.')

print("")




    

hangman(secret_word)


    
